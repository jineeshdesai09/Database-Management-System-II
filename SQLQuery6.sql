-- Create the Products table
CREATE TABLE PRODUCTS (
	PRODUCT_ID INT PRIMARY KEY,
	PRODUCT_NAME VARCHAR(250) NOT NULL,
	PRICE DECIMAL(10, 2) NOT NULL
);


-- Insert data into the Products table
INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, PRICE) VALUES
(1, 'Smartphone', 35000),
(2, 'Laptop', 65000),
(3, 'Headphones', 5500),
(4, 'Television', 85000),
(5, 'Gaming Console', 32000);

SELECT * FROM PRODUCTS;
--Part - A

--1. Create a cursor Product_Cursor to fetch all the rows from a products table.
DECLARE @PRODUCT_ID INT ,
	@PRODUCT_NAME VARCHAR(250),
	@PRICE DECIMAL(10, 2); 

DECLARE PRODUCT_CURSOR CURSOR
FOR SELECT PRODUCT_ID, PRODUCT_NAME, PRICE FROM PRODUCTS;

OPEN PRODUCT_CURSOR;
FETCH NEXT FROM PRODUCT_CURSOR INTO @PRODUCT_ID, @PRODUCT_NAME, @PRICE;

WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT CAST(@PRODUCT_ID AS VARCHAR) + '-' + @PRODUCT_NAME + '-' + CAST(@PRICE AS VARCHAR)
		FETCH NEXT FROM PRODUCT_CURSOR INTO @PRODUCT_ID, @PRODUCT_NAME, @PRICE;
	END

CLOSE PRODUCT_CURSOR;
DEALLOCATE PRODUCT_CURSOR;

SELECT * FROM Products;

--2. Create a cursor Product_Cursor_Fetch to fetch the records in form of ProductID_ProductName.
--(Example: 1_Smartphone)
DECLARE @PRODUCT_ID1 INT,
	@PRODUCT_NAME1 VARCHAR(50); 

DECLARE PRODUCT_CURSOR_FETCH CURSOR
FOR SELECT PRODUCT_ID, PRODUCT_NAME FROM PRODUCTS;

OPEN PRODUCT_CURSOR_FETCH;
FETCH NEXT FROM PRODUCT_CURSOR_FETCH INTO @PRODUCT_ID1, @PRODUCT_NAME1;

WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT CAST(@PRODUCT_ID1 AS VARCHAR) + '_' + @PRODUCT_NAME1
		FETCH NEXT FROM PRODUCT_CURSOR_FETCH INTO @PRODUCT_ID1, @PRODUCT_NAME1;
	END

CLOSE PRODUCT_CURSOR_FETCH;
DEALLOCATE PRODUCT_CURSOR_FETCH;

--3. Create a Cursor to Find and Display Products Above Price 30,000.
DECLARE @PRODUCT_ID2 INT ,
	@PRODUCT_NAME2 VARCHAR(250),
	@PRICE2 DECIMAL(10, 2); 

DECLARE PRODUCT_CURSOR_PRICE CURSOR
FOR SELECT PRODUCT_ID, PRODUCT_NAME, PRICE FROM PRODUCTS WHERE PRICE > 30000;

OPEN PRODUCT_CURSOR_PRICE;
FETCH NEXT FROM PRODUCT_CURSOR_PRICE INTO @PRODUCT_ID2, @PRODUCT_NAME2, @PRICE2;

WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT CAST(@PRODUCT_ID2 AS VARCHAR) + '-' + @PRODUCT_NAME2 + '-' + CAST(@PRICE2 AS VARCHAR) 
		FETCH NEXT FROM PRODUCT_CURSOR_PRICE INTO @PRODUCT_ID2, @PRODUCT_NAME2, @PRICE2;
	END

CLOSE PRODUCT_CURSOR_PRICE;
DEALLOCATE PRODUCT_CURSOR_PRICE;


--4. Create a cursor Product_CursorDelete that deletes all the data from the Products table.

DECLARE @PRODUCTID4 INT;

DECLARE PRODUCT_CURSORDELETE CURSOR
FOR SELECT PRODUCT_ID FROM PRODUCTS;

OPEN PRODUCT_CURSORDELETE
FETCH NEXT FROM PRODUCT_CURSORDELETE INTO @PRODUCTID4

WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM
		PRODUCTS 
		WHERE PRODUCT_ID = @PRODUCTID4

		FETCH NEXT FROM PRODUCT_CURSORDELETE INTO @PRODUCTID4
	END

CLOSE PRODUCT_CURSORDELETE
DEALLOCATE PRODUCT_CURSORDELETE	


--Part – B


--5. Create a cursor Product_CursorUpdate that retrieves all the data from the products table and increases
--the price by 10%.
DECLARE @PRODUCT_ID5 INT,@PRODUCT_NAME5 VARCHAR(100),@PRICE5 INT

DECLARE PRODUCT_CURSORUPDATE CURSOR
FOR SELECT PRODUCT_ID,PRODUCT_NAME,PRICE FROM PRODUCTS

OPEN PRODUCT_CURSORUPDATE
FETCH NEXT FROM PRODUCT_CURSORUPDATE INTO @PRODUCT_ID5,@PRODUCT_NAME5,@PRICE5

WHILE @@FETCH_STATUS=0
	BEGIN
		UPDATE PRODUCTS
		SET PRICE=PRICE+PRICE*0.1

		FETCH NEXT FROM PRODUCT_CURSORUPDATE INTO @PRODUCT_ID5,@PRODUCT_NAME5,@PRICE5;
	END

CLOSE PRODUCT_CURSORUPDATE
DEALLOCATE PRODUCT_CURSORUPDATE

SELECT * FROM PRODUCTS


--6. Create a Cursor to Rounds the price of each product to the nearest whole number.
DECLARE @PRICE6 INT

DECLARE PRODUCT_CURSORROUND CURSOR
FOR SELECT PRICE FROM PRODUCTS

OPEN PRODUCT_CURSORROUND
FETCH NEXT FROM PRODUCT_CURSORROUND INTO @PRICE6

WHILE @@FETCH_STATUS=0
	BEGIN
		UPDATE PRODUCTS
		SET PRICE=ROUND(PRICE,0)
		
		FETCH NEXT FROM PRODUCT_CURSORROUND INTO @PRICE6
	END

CLOSE PRODUCT_CURSORROUND
DEALLOCATE PRODUCT_CURSORROUND
		
SELECT * FROM PRODUCTS


--Part – C
--7. Create a cursor to insert details of Products into the NewProducts table if the product is “Laptop”
--(Note: Create NewProducts table first with same fields as Products table)

CREATE TABLE NEW_PRODUCTS (
	PRODUCT_ID INT PRIMARY KEY,
	PRODUCT_NAME VARCHAR(250) NOT NULL,
	PRICE DECIMAL(10, 2) NOT NULL
);

SELECT * FROM NEW_PRODUCTS;
-- 7

DECLARE @PRODUCT_ID7 INT, @PRODUCT_NAME7 AS VARCHAR(100), @PRICE7 DECIMAL (10,2)

DECLARE CURSOR__PRODUCT_DETAIL CURSOR
FOR SELECT PRODUCT_ID, PRODUCT_NAME, PRICE FROM NEW_PRODUCTS;

OPEN CURSOR__PRODUCT_DETAIL
FETCH NEXT FROM CURSOR__PRODUCT_DETAIL INTO @PRODUCT_ID7, @PRODUCT_NAME7, @PRICE7;

WHILE @@FETCH_STATUS=0
	BEGIN 
		IF (@PRODUCT_NAME7 = 'LAPTOP')
			INSERT INTO NEW_PRODUCTS VALUES (@PRODUCT_ID7, @PRODUCT_NAME7, @PRICE7)
		PRINT CAST(@PRODUCT_ID7 AS VARCHAR) + '-' + @PRODUCT_NAME7 + '-' + CAST(@PRICE7 AS VARCHAR) 
		FETCH NEXT FROM CURSOR__PRODUCT_DETAIL INTO @PRODUCT_ID7, @PRODUCT_NAME7, @PRICE7;
	END

CLOSE CURSOR__PRODUCT_DETAIL
DEALLOCATE CURSOR__PRODUCT_DETAIL

SELECT * FROM NEW_PRODUCTS
--8. Create a Cursor to Archive High-Price Products in a New Table (ArchivedProducts), Moves products
--with a price above 50000 to an archive table, removing them from the original Products table.
CREATE TABLE ARCHIVEDPRODUCTS (
	PRODUCT_ID INT PRIMARY KEY,
	PRODUCT_NAME VARCHAR(250) NOT NULL,
	PRICE DECIMAL(10, 2) NOT NULL
);

DECLARE @PRODUCT_ID07 INT ,
	@PRODUCT_NAME07 VARCHAR(250),
	@PRICE07 DECIMAL(10, 2); 

DECLARE PRODUCT_CURSORARCHIVE_HIGH_PRICE_PRODUCTS CURSOR
FOR SELECT PRODUCT_ID , PRODUCT_NAME , PRICE FROM PRODUCTS;

OPEN PRODUCT_CURSORARCHIVE_HIGH_PRICE_PRODUCTS;
FETCH NEXT FROM PRODUCT_CURSORARCHIVE_HIGH_PRICE_PRODUCTS INTO @PRODUCT_ID07, @PRODUCT_NAME07, @PRICE07;

WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@PRODUCT_NAME07 = 'LAPTOP')
			INSERT INTO NEW_PRODUCTS VALUES(@PRODUCT_ID07 , @PRODUCT_NAME07 , @PRICE07)
		PRINT CAST(@PRODUCT_ID07 AS VARCHAR) + '-' + @PRODUCT_NAME07 + '-' + CAST(FLOOR(@PRICE07) AS VARCHAR) 
		FETCH NEXT FROM PRODUCT_CURSORARCHIVE_HIGH_PRICE_PRODUCTS INTO @PRODUCT_ID07, @PRODUCT_NAME07, @PRICE07;
	END

CLOSE PRODUCT_CURSORARCHIVE_HIGH_PRICE_PRODUCTS;
DEALLOCATE PRODUCT_CURSORARCHIVE_HIGH_PRICE_PRODUCTS;

SELECT * FROM NEW_PRODUCTS
